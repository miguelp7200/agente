#!/bin/bash
# Invoice Chatbot Backend Startup Script
# Version: 2.0 - Enhanced debugging for MCP Toolbox
set -e

echo "üöÄ Iniciando Invoice Chatbot Backend..."
echo "üìç Proyecto READ: $GOOGLE_CLOUD_PROJECT_READ"
echo "üìç Proyecto WRITE: $GOOGLE_CLOUD_PROJECT_WRITE"
echo "üîë Service Account: $SERVICE_ACCOUNT_ADK"

# Funci√≥n para logs con timestamp
log() {
    echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
}

# Funci√≥n para verificar salud de servicio
check_service() {
    local port=$1
    local name=$2
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:$port/health >/dev/null 2>&1; then
            log "‚úÖ $name est√° corriendo en puerto $port"
            return 0
        fi
        log "‚è≥ Esperando $name... (intento $attempt/$max_attempts)"
        sleep 2
        attempt=$((attempt + 1))
    done
    
    log "‚ùå Error: $name no inici√≥ en puerto $port"
    return 1
}

# 1. Verificar variables de entorno cr√≠ticas
if [ -z "$GOOGLE_CLOUD_PROJECT_READ" ] || [ -z "$GOOGLE_CLOUD_PROJECT_WRITE" ]; then
    log "‚ùå Error: Variables de entorno de proyectos no configuradas"
    exit 1
fi

# 2. Configurar Service Account para Cloud Run
if [ -n "$SERVICE_ACCOUNT_ADK" ]; then
    log "üîë Usando Service Account: $SERVICE_ACCOUNT_ADK"
    log "üîç DEBUG: GOOGLE_APPLICATION_CREDENTIALS actual: '$GOOGLE_APPLICATION_CREDENTIALS'"
    
    # Asegurar que NO hay GOOGLE_APPLICATION_CREDENTIALS configurada para Cloud Run
    unset GOOGLE_APPLICATION_CREDENTIALS
    log "‚úÖ GOOGLE_APPLICATION_CREDENTIALS removida para usar metadata server"
else
    log "üîë Usando Application Default Credentials"
fi

# 3. Verificar MCP Toolbox antes de iniciar
log "üîç Verificando MCP Toolbox..."
if [ ! -f "./mcp-toolbox/toolbox" ]; then
    log "‚ùå Error: MCP Toolbox no encontrado en ./mcp-toolbox/toolbox"
    exit 1
fi

log "üìã Permisos del toolbox:"
ls -la ./mcp-toolbox/toolbox

log "üß™ Probando ejecuci√≥n del toolbox..."
./mcp-toolbox/toolbox --help || log "‚ö†Ô∏è  Toolbox help fall√≥"

# 3. Iniciar MCP Toolbox en background con configuraci√≥n correcta
log "üöÄ Iniciando MCP Toolbox en puerto 5000..."
log "üìã Usando configuraci√≥n: ./mcp-toolbox/tools_updated.yaml"

# Verificar que el archivo de configuraci√≥n existe
if [ ! -f "./mcp-toolbox/tools_updated.yaml" ]; then
    log "‚ùå Error: tools_updated.yaml no encontrado"
    exit 1
fi

# Mostrar informaci√≥n de debug del toolbox
log "üìã Informaci√≥n del toolbox:"
ls -la ./mcp-toolbox/
log "üìã Configuraci√≥n YAML:"
head -20 ./mcp-toolbox/tools_updated.yaml

# Iniciar MCP Toolbox con logs detallados
nohup ./mcp-toolbox/toolbox --tools-file=./mcp-toolbox/tools_updated.yaml --port=5000 --log-level=debug > /tmp/toolbox.log 2>&1 &
TOOLBOX_PID=$!
log "üìç Toolbox PID: $TOOLBOX_PID"

# Esperar y verificar que el toolbox inicie correctamente
log "‚è≥ Esperando MCP Toolbox inicializaci√≥n..."
sleep 10

# Verificar m√∫ltiples veces el puerto
for i in {1..5}; do
    log "üîç Verificando puerto 5000 (intento $i/5)..."
    if nc -z localhost 5000; then
        log "‚úÖ MCP Toolbox iniciado correctamente en puerto 5000"
        break
    else
        log "‚ö†Ô∏è  Puerto 5000 no responde, esperando m√°s..."
        sleep 3
    fi
    
    if [ $i -eq 5 ]; then
        log "‚ùå MCP Toolbox no est√° escuchando en puerto 5000 despu√©s de 5 intentos"
        log "üìã Logs del toolbox:"
        cat /tmp/toolbox.log || log "No se pudo leer toolbox.log"
        log "üìã Procesos activos:"
        ps aux | grep toolbox || log "No hay procesos toolbox"
        exit 1
    fi
done

# 4. Configurar PDF Server integrado (solo en desarrollo local)
# En Cloud Run, los archivos se sirven v√≠a funciones del agente
if [ "$PDF_SERVER_PORT" != "$PORT" ]; then
    log "üöÄ Iniciando PDF Server en puerto $PDF_SERVER_PORT (desarrollo local)..."
    python local_pdf_server.py &
    PDF_PID=$!
    
    # Esperar un momento para que el PDF server inicie
    log "‚è≥ Esperando PDF Server inicializaci√≥n..."
    sleep 5
    log "‚úÖ PDF Server iniciado en puerto $PDF_SERVER_PORT"
else
    log "üìÅ PDF Server integrado en ADK (puerto $PORT) para Cloud Run"
    PDF_PID=""
fi

# 4. Verificar que ADK est√° disponible
if ! command -v adk &> /dev/null; then
    log "‚ùå Error: ADK no est√° instalado"
    exit 1
fi

# 5. Verificar que MCP Toolbox est√° disponible
if [ ! -f "./mcp-toolbox/toolbox" ]; then
    log "‚ùå Error: MCP Toolbox no encontrado"
    exit 1
fi

# 6. Verificar agentes disponibles
if [ ! -d "my-agents" ]; then
    log "‚ùå Error: Directorio my-agents no encontrado"
    exit 1
fi

# 7. Iniciar ADK API Server
log "üöÄ Iniciando ADK API Server en puerto $PORT..."
log "üåê CORS permitido para todos los or√≠genes en producci√≥n"

# Trap para cleanup en caso de se√±ales
trap 'log "üõë Deteniendo servicios..."; [ -n "$PDF_PID" ] && kill $PDF_PID 2>/dev/null; kill $TOOLBOX_PID 2>/dev/null || true; exit 0' SIGTERM SIGINT

# Ejecutar ADK (este ser√° el proceso principal)
exec adk api_server --host=0.0.0.0 --port=$PORT my-agents --allow_origins="*"
